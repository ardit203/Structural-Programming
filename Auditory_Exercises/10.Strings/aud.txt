/*Write a function that will find how many times a given character occurs in given string.*/

#include <stdio.h>
#include <string.h>
#include <ctype.h>

int countOcc(char *str, char c){
    int counter=0;
    for(int i=0 ; i< strlen(str) ; i++){
        if(toupper(str[i])== toupper(c)){
            counter++;
        }
    }
    return counter;
}

int main(){
    char c;
    scanf("%c\n",&c);
    char str[100];
    fgets(str,sizeof (str),stdin);
    str[strlen(str)-1]='\0';
    puts(str);
    printf("%d", countOcc(str,c));
    return 0;
}






/*Write a function that will return the length of a string*/

#include <stdio.h>
#include <string.h>
#include <ctype.h>

int length(char * str){
    int length=0;
    while(*str!='\0'){
     length++;
     str++;
    }
    return length;
}

int main(){
    char str[100];
    fgets(str,sizeof (str),stdin);
    str[strlen(str)-1]='\0';
    printf("%d", length(str));
    return 0;
}




/*Write a function that will return the length of a string*/

#include <stdio.h>
#include <string.h>
#include <ctype.h>

int length(char * str){
    int length=0;
    while(*str!='\0'){
     length++;
     str++;
    }
    return length;
}

int lengthR(char *str){
    if(*str=='\0'){
        return 0;
    } else{
        return 1+ lengthR(str+1);
    }
}

int main(){
    char str[100];
    fgets(str,sizeof (str),stdin);
    str[strlen(str)-1]='\0';
    printf("%d", lengthR(str));
    return 0;
}




/*Write a program that will print substring from given string, determined with the
position and the length as parameters read from SI. The substring starts from the
character on the position counted from left to right.*/

#include <stdio.h>
#include <string.h>
#include <ctype.h>

void sub(char *str,int start,int len){
    for(int i=start ; i<start+len && i< strlen(str) ; i++){
        printf("%c",*(str+i));
    }
}

int main(){
    char str[100];
    fgets(str,sizeof (str),stdin);
    str[strlen(str)-1]='\0';

    int start,len;
    scanf("%d%d",&start,&len);
    sub(str,start,len);
    return 0;
}




/*Write a function that will check if one string is substring of some other string.*/

#include <stdio.h>
#include <string.h>
#include <ctype.h>

int subStr(char *smaller,char *bigger){
    int lenS= strlen(smaller);
    int lenB= strlen(bigger);

    if(lenS>lenB){
        return 0;
    }

    for(int i=0 ; i<=lenB-lenS ; i++){
        if(strncmp(smaller,bigger+i,lenS)==0){
            return 1;
        }
    }
    return 0;
}

int subStr1(char *smaller,char *bigger){
    char *result= strstr(bigger,smaller);
    return result!='\0';
}

int main(){
    char str2[100];
    fgets(str2,sizeof (str2),stdin);
    str2[strlen(str2)-1]='\0';
    
    char str[100];
    fgets(str,sizeof (str),stdin);
    str[strlen(str)-1]='\0';

    if(subStr(str2,str)){
        printf("YES");
    }else{
        printf("NO");
    }
    return 0;
}





/*Write a function that will check if given sentence is a palindrome. Ignore the empty
spaces, punctuations characters and the case of letters.*/

#include <stdio.h>
#include <string.h>
#include <ctype.h>

void convert(char *str){
    int j=0;
    for(int i=0 ; i< strlen(str) ; i++){
        if(isalpha(str[i])){
            str[j]= toupper(str[i]);
            j++;
        }
    }
    str[j]='\0';
}

int isPalindrome(char *str){
    convert(str);
    for(int i=0,j= strlen(str)-1 ; i< strlen(str) ; i++,j--){
        if(str[i]!=str[j]){
            return 0;
        }
    }
    return 1;
}


int main(){
    char str[100];
    fgets(str,sizeof (str),stdin);
    str[strlen(str)-1]='\0';

    if(isPalindrome(str)){
        printf("YES\n");
    } else{
        printf("NO\n");
    }


    return 0;
}




